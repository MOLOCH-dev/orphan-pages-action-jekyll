{
  "swagger": "2.0",
  "info": {
    "description": "<b>Note:</b> Test the API with curl:<br><br><code>curl -sS -u &lt;org&gt;/iamapikey:&lt;key&gt; https://&lt;host&gt;:&lt;port&gt;/:&lt;edge-exchange&gt;/v1/orgs/... | jq</code>",
    "license": {
      "name": "Apache License Version 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "termsOfService": "",
    "title": "Exchange API",
    "version": "2.50.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "schemes": [
    "http"
  ],
  "paths": {
    "/admin/hashpw": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminHashpwRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          }
        },
        "tags": [
          "administration"
        ],
        "description": "Takes the password specified in the request body, bcrypts it with a random salt, and returns the result. This can be useful if you want to specify root's hash pw in the config file instead of the clear pw.",
        "operationId": "adminHashPwRoute",
        "summary": "Returns a bcrypted hash of a password"
      }
    },
    "/admin/status": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/GetAdminStatusResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          }
        },
        "tags": [
          "administration"
        ],
        "description": "Returns a dictionary of statuses/statistics. Can be run by any user.",
        "operationId": "adminGetStatusRoute",
        "summary": "Returns status of the Exchange server"
      }
    },
    "/admin/version": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "administration"
        ],
        "description": "Returns the version of the Exchange server as a simple string (no JSON or quotes). Can be run by anyone.",
        "operationId": "adminGetVersionRoute",
        "summary": "Returns the version of the Exchange server"
      }
    },
    "/catalog/patterns": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter results to only include orgs with this org type. A common org type is 'IBM'.",
            "in": "query",
            "name": "orgtype",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"patterns\": {\n    \"orgid/patternname\": {\n      \"owner\": \"string\",\n      \"label\": \"My Pattern\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"services\": [\n        {\n          \"serviceUrl\": \"string\",\n          \"serviceOrgid\": \"string\",\n          \"serviceArch\": \"string\",\n          \"agreementLess\": false,\n          \"serviceVersions\": [\n            {\n              \"version\": \"4.5.6\",\n              \"deployment_overrides\": \"string\",\n              \"deployment_overrides_signature\": \"a\",\n              \"priority\": {\n                \"priority_value\": 50,\n                \"retries\": 1,\n                \"retry_durations\": 3600,\n                \"verified_durations\": 52\n              },\n              \"upgradePolicy\": {\n                \"lifecycle\": \"immediate\",\n                \"time\": \"01:00AM\"\n              }\n            }\n          ],\n          \"dataVerification\": {\n            \"metering\": {\n              \"tokens\": 1,\n              \"per_time_unit\": \"min\",\n              \"notification_interval\": 30\n            },\n            \"URL\": \"\",\n            \"enabled\": true,\n            \"interval\": 240,\n            \"check_rate\": 15,\n            \"user\": \"\",\n            \"password\": \"\"\n          },\n          \"nodeHealth\": {\n            \"missing_heartbeat_interval\": 600,\n            \"check_agreement_status\": 120\n          }\n        }\n      ],\n      \"userInput\": [],\n      \"agreementProtocols\": [\n        {\n          \"name\": \"Basic\"\n        }\n      ],\n      \"lastUpdated\": \"2019-05-14T16:34:34.194Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetPatternsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "catalog"
        ],
        "description": "Returns public pattern definitions from orgs of the specified orgtype (default is IBM). Can be run by any user, node, or agbot.",
        "operationId": "catalogGetPatternsRoute",
        "summary": "Returns patterns in the IBM catalog"
      }
    },
    "/catalog/services": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter results to only include orgs with this org type. A common org type is 'IBM'.",
            "in": "query",
            "name": "orgtype",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"services\": {\n    \"orgid/servicename\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"1.2.3\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.221Z[UTC]\"\n    },\n    \"orgid/servicename2\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"4.5.6\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [\n        {\n          \"url\": \"string\",\n          \"org\": \"string\",\n          \"version\": \"[1.0.0,INFINITY)\",\n          \"versionRange\": \"[1.0.0,INFINITY)\",\n          \"arch\": \"string\"\n        }\n      ],\n      \"userInput\": [\n        {\n          \"name\": \"foo\",\n          \"label\": \"The Foo Value\",\n          \"type\": \"string\",\n          \"defaultValue\": \"bar\"\n        }\n      ],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.680Z[UTC]\"\n    },\n    \"orgid/servicename3\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"fake\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"string\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"\",\n      \"deploymentSignature\": \"\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-12-13T15:38:57.679Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetServicesResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "catalog"
        ],
        "description": "Returns public service definitions from orgs of the specified orgtype (default is IBM). Can be run by any user, node, or agbot.",
        "operationId": "catalogGetServicesRoute",
        "summary": "Returns services in the IBM catalog"
      }
    },
    "/catalog/{orgid}/patterns": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this id (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "idfilter",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this public setting",
            "in": "query",
            "name": "public",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this label (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "label",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this description (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "description",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"patterns\": {\n    \"orgid/patternname\": {\n      \"owner\": \"string\",\n      \"label\": \"My Pattern\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"services\": [\n        {\n          \"serviceUrl\": \"string\",\n          \"serviceOrgid\": \"string\",\n          \"serviceArch\": \"string\",\n          \"agreementLess\": false,\n          \"serviceVersions\": [\n            {\n              \"version\": \"4.5.6\",\n              \"deployment_overrides\": \"string\",\n              \"deployment_overrides_signature\": \"a\",\n              \"priority\": {\n                \"priority_value\": 50,\n                \"retries\": 1,\n                \"retry_durations\": 3600,\n                \"verified_durations\": 52\n              },\n              \"upgradePolicy\": {\n                \"lifecycle\": \"immediate\",\n                \"time\": \"01:00AM\"\n              }\n            }\n          ],\n          \"dataVerification\": {\n            \"metering\": {\n              \"tokens\": 1,\n              \"per_time_unit\": \"min\",\n              \"notification_interval\": 30\n            },\n            \"URL\": \"\",\n            \"enabled\": true,\n            \"interval\": 240,\n            \"check_rate\": 15,\n            \"user\": \"\",\n            \"password\": \"\"\n          },\n          \"nodeHealth\": {\n            \"missing_heartbeat_interval\": 600,\n            \"check_agreement_status\": 120\n          }\n        }\n      ],\n      \"userInput\": [],\n      \"agreementProtocols\": [\n        {\n          \"name\": \"Basic\"\n        }\n      ],\n      \"lastUpdated\": \"2019-05-14T16:34:34.194Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetPatternsResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "catalog"
        ],
        "description": "Returns all pattern definitions in this organization and in the IBM organization. Can be run by any user, node, or agbot.",
        "operationId": "catalogGetPatternsAll",
        "summary": "Returns all patterns"
      }
    },
    "/catalog/{orgid}/services": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this public setting",
            "in": "query",
            "name": "public",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this url (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "url",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this version (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "version",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this arch (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "arch",
            "type": "string"
          },
          {
            "description": "Filter results to only include services that are deployable on this nodeType. Valid values: devices or clusters",
            "in": "query",
            "name": "nodetype",
            "type": "string"
          },
          {
            "description": "Filter results to only include services that use this service with this url (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "requiredurl",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"services\": {\n    \"orgid/servicename\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"1.2.3\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.221Z[UTC]\"\n    },\n    \"orgid/servicename2\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"4.5.6\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [\n        {\n          \"url\": \"string\",\n          \"org\": \"string\",\n          \"version\": \"[1.0.0,INFINITY)\",\n          \"versionRange\": \"[1.0.0,INFINITY)\",\n          \"arch\": \"string\"\n        }\n      ],\n      \"userInput\": [\n        {\n          \"name\": \"foo\",\n          \"label\": \"The Foo Value\",\n          \"type\": \"string\",\n          \"defaultValue\": \"bar\"\n        }\n      ],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.680Z[UTC]\"\n    },\n    \"orgid/servicename3\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"fake\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"string\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"\",\n      \"deploymentSignature\": \"\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-12-13T15:38:57.679Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetServicesResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "catalog"
        ],
        "description": "Returns all service definitions in this organization and in the IBM organization. Can be run by any user, node, or agbot.",
        "operationId": "catalogGetServicesAll",
        "summary": "Returns all services"
      }
    },
    "/changes/maxchangeid": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/MaxChangeIdResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns the max changeid of the resource changes. Can be run by any user, node, or agbot.",
        "operationId": "orgsGetMaxChangeIdRoute",
        "summary": "Returns the max changeid of the resource changes"
      }
    },
    "/myorgs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"orgs\": {\n    \"string\" : {\n      \"orgType\": \"\",\n      \"label\": \"\",\n      \"description\": \"\",\n      \"lastUpdated\": \"\",\n      \"tags\": null,\n      \"limits\": {\n        \"maxNodes\": 0\n      },\n      \"heartbeatIntervals\": {\n        \"minInterval\": 0,\n        \"maxInterval\": 0,\n        \"intervalAdjustment\": 0\n      }\n    }.\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetOrgsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns all the org definitions in the exchange that match the accounts the caller has access too. Can be run by any user. Request body is the response from /idmgmt/identity/api/users/<user_ID>/accounts API.",
        "operationId": "myOrgsPostRoute",
        "summary": "Returns the orgs a user can view"
      }
    },
    "/orgs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter results to only include orgs with this org type. A common org type is 'IBM'.",
            "in": "query",
            "name": "orgtype",
            "type": "string"
          },
          {
            "description": "Filter results to only include orgs with this label (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "label",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"orgs\": {\n    \"string\" : {\n      \"orgType\": \"\",\n      \"label\": \"\",\n      \"description\": \"\",\n      \"lastUpdated\": \"\",\n      \"tags\": null,\n      \"limits\": {\n        \"maxNodes\": 0\n      },\n      \"heartbeatIntervals\": {\n        \"minInterval\": 0,\n        \"maxInterval\": 0,\n        \"intervalAdjustment\": 0\n      }\n    }.\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetOrgsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns some or all org definitions. Can be run by any user if filter orgType=IBM is used, otherwise can only be run by the root user.",
        "operationId": "orgsGetRoute",
        "summary": "Returns all orgs"
      }
    },
    "/orgs/{orgid}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Deletes an org. This can only be called by root or a user in the org with the admin role.",
        "operationId": "orgDeleteRoute",
        "summary": "Deletes an org"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire org resource will be returned.",
            "in": "query",
            "name": "attribute",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "lastIndex": 0,
                "orgs": {
                  "string": {
                    "tags": {
                      "cloud_id": ""
                    },
                    "description": "No",
                    "heartbeatIntervals": {
                      "intervalAdjustment": 0,
                      "maxInterval": 0,
                      "minInterval": 0
                    },
                    "label": "Test Org",
                    "lastUpdated": "2020-08-25T14:04:21.707Z[UTC]",
                    "limits": {
                      "maxNodes": 0
                    },
                    "orgType": ""
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/GetOrgsResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns the org with the specified id. Can be run by any user in this org.",
        "operationId": "orgGetRoute",
        "summary": "Returns an org"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify only **one** of the attributes:",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutOrgRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Updates one attribute of a org. This can only be called by root or a user in the org with the admin role.",
        "operationId": "orgPatchRoute",
        "summary": "Updates 1 attribute of an org"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutOrgRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource created - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Creates an org resource. This can only be called by the root user.",
        "operationId": "orgPostRoute",
        "summary": "Adds an org"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Does a full replace of an existing org.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutOrgRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Does a full replace of an existing org. This can only be called by root or a user in the org with the admin role.",
        "operationId": "orgPutRoute",
        "summary": "Updates an org"
      }
    },
    "/orgs/{orgid}/agbots": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include agbots with this id (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "idfilter",
            "type": "string"
          },
          {
            "description": "Filter results to only include agbots with this name (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Filter results to only include agbots with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"agbots\": {\n    \"orgid/agbotname\": {\n      \"token\": \"string\",\n      \"name\": \"string\",\n      \"owner\": \"string\",\n      \"msgEndPoint\": \"\",\n      \"lastHeartbeat\": \"2020-05-27T19:01:10.713Z[UTC]\",\n      \"publicKey\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetAgbotsResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot"
        ],
        "description": "Returns all agbots (Agreement Bots). Can be run by any user.",
        "operationId": "agbotsGetRoute",
        "summary": "Returns all agbots"
      }
    },
    "/orgs/{orgid}/agbots/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot"
        ],
        "description": "Deletes an agbot (Agreement Bot), and deletes the agreements stored for this agbot (but does not actually cancel the agreements between the nodes and agbot). Can be run by the owning user or the agbot.",
        "operationId": "agbotDeleteRoute",
        "summary": "Deletes an agbot"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire node resource (including services) will be returned",
            "in": "query",
            "name": "attribute",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "agbots": {
                  "orgid/agbotname": {
                    "lastHeartbeat": "2020-05-27T19:01:10.713Z[UTC]",
                    "msgEndPoint": "",
                    "name": "string",
                    "owner": "string",
                    "publicKey": "string",
                    "token": "string"
                  }
                },
                "lastIndex": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/GetAgbotsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot"
        ],
        "description": "Returns the agbot (Agreement Bot) with the specified id. Can be run by a user or the agbot.",
        "operationId": "agbotGetRoute",
        "summary": "Returns an agbot"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify only **one** of the following attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchAgbotsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot"
        ],
        "description": "Updates some attributes of an agbot. This can be called by the user or the agbot.",
        "operationId": "agbotPatchRoute",
        "summary": "Updates 1 attribute of an agbot"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutAgbotsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "resource add/updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot"
        ],
        "description": "Adds a new agbot (Agreement Bot) to the exchange DB, or updates an existing agbot. This must be called by the user to add an agbot, and then can be called by that user or agbot to update itself.",
        "operationId": "agbotPutRoute",
        "summary": "Add/updates an agbot"
      }
    },
    "/orgs/{orgid}/agbots/{id}/businesspols": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/policy"
        ],
        "description": "Deletes all of the current business policies that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId": "agbotDeleteBusPolsRoute",
        "summary": "Deletes all business policies of an agbot"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n\"businessPols\" : {\n  \"buspolid\": {\n    \"businessPolOrgid\": \"string\",\n    \"businessPol\": \"string\",\n    \"nodeOrgid\" : \"string\",\n    \"lastUpdated\": \"string\"\n  },\n    ...\n}\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetAgbotBusinessPolsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/policy"
        ],
        "description": "Returns all business policies that this agbot is finding nodes for to make agreements with them. Can be run by the owning user or the agbot.",
        "operationId": "agbotGetBusPolsRoute",
        "summary": "Returns all business policies served by this agbot"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostAgbotBusinessPolRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/policy"
        ],
        "description": "Adds a new business policy and node org that this agbot should find nodes for to make agreements with them. This is called by the owning user or the agbot to give their information about the business policy.",
        "operationId": "agbotPostBusPolRoute",
        "summary": "Adds a business policy that the agbot should serve"
      }
    },
    "/orgs/{orgid}/agbots/{id}/businesspols/{buspolid}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the business policy to be deleted.",
            "in": "path",
            "name": "buspolid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/policy"
        ],
        "description": "Deletes a business policy that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId": "agbotDeleteBusPolRoute",
        "summary": "Deletes a business policy of an agbot"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the business policy.",
            "in": "path",
            "name": "buspolid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "businessPols": {
                  "buspolid": {
                    "businessPol": "string",
                    "businessPolOrgid": "string",
                    "lastUpdated": "string",
                    "nodeOrgid": "string"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/GetAgbotBusinessPolsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/policy"
        ],
        "description": "Returns the business policy with the specified patid for the specified agbot id. The patid should be in the form businessPolOrgid_businessPol. Can be run by the owning user or the agbot.",
        "operationId": "agbotGetBusPolRoute",
        "summary": "Returns a business policy this agbot is serving"
      }
    },
    "/orgs/{orgid}/agbots/{id}/heartbeat": {
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot"
        ],
        "description": "Lets the exchange know this agbot is still active. Can be run by the owning user or the agbot.",
        "operationId": "agbotHeartbeatRoute",
        "summary": "Tells the exchange this agbot is still operating"
      }
    },
    "/orgs/{orgid}/agbots/{id}/patterns": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/pattern"
        ],
        "description": "Deletes all of the current patterns that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId": "agbotDeletePatsRoute",
        "summary": "Deletes all patterns of an agbot"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"patterns\": {\n    \"pattern1\": {\n      \"patternOrgid\": \"string\",\n      \"pattern\": \"string\",\n      \"nodeOrgid\": \"string\",\n      \"lastUpdated\": \"2019-05-14T16:34:36.295Z[UTC]\"\n    },\n    \"pattern2\": {\n      \"patternOrgid\": \"string\",\n      \"pattern\": \"string\",\n      \"nodeOrgid\": \"string\",\n      \"lastUpdated\": \"2019-05-14T16:34:36.397Z[UTC]\"\n    },\n      ...\n  }\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetAgbotPatternsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/pattern"
        ],
        "description": "Returns all patterns that this agbot is finding nodes for to make agreements with them. Can be run by the owning user or the agbot.",
        "operationId": "agbotGetPatternsRoute",
        "summary": "Returns all patterns served by this agbot"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostAgbotPatternRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/pattern"
        ],
        "description": "Adds a new pattern and node org that this agbot should find nodes for to make agreements with them. This is called by the owning user or the agbot to give their information about the pattern.",
        "operationId": "agbotPostPatRoute",
        "summary": "Adds a pattern that the agbot should serve"
      }
    },
    "/orgs/{orgid}/agbots/{id}/patterns/{patid}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the pattern to be deleted.",
            "in": "path",
            "name": "patid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/pattern"
        ],
        "description": "Deletes a pattern that this agbot was serving. Can be run by the owning user or the agbot.",
        "operationId": "agbotDeletePatRoute",
        "summary": "Deletes a pattern of an agbot"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agbot.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the pattern.",
            "in": "path",
            "name": "patid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "patterns": {
                  "patternname": {
                    "lastUpdated": "2019-05-14T16:34:36.397Z[UTC]",
                    "nodeOrgid": "string",
                    "pattern": "string",
                    "patternOrgid": "string"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/GetAgbotPatternsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "agreement-bot/pattern"
        ],
        "description": "Returns the pattern with the specified patid for the specified agbot id. The patid should be in the form patternOrgid_pattern. Can be run by the owning user or the agbot.",
        "operationId": "agbotGetPatternRoute",
        "summary": "Returns a pattern this agbot is serving"
      }
    },
    "/orgs/{orgid}/business/policies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include business policies with this id (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "idfilter",
            "type": "string"
          },
          {
            "description": "Filter results to only include business policies with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Filter results to only include business policies with this label (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "label",
            "type": "string"
          },
          {
            "description": "Filter results to only include business policies with this description (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "description",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"businessPolicy\": {\n    \"orgid/mybuspol\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"service\": {\n        \"name\": \"string\",\n        \"org\": \"string\",\n        \"arch\": \"string\",\n        \"serviceVersions\": [\n          {\n            \"version\": \"1.2.3\",\n            \"priority\": null,\n            \"upgradePolicy\": null\n          }\n        ],\n        \"nodeHealth\": {\n          \"missing_heartbeat_interval\": 600,\n          \"check_agreement_status\": 120\n        }\n      },\n      \"userInput\": [],\n      \"properties\": [\n        {\n          \"name\": \"string\",\n          \"type\": \"string\",\n          \"value\": \"string\"\n        }\n      ],\n      \"constraints\": [\n        \"a == b\"\n      ],\n      \"lastUpdated\": \"string\",\n      \"created\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetBusinessPoliciesResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "policy"
        ],
        "description": "Returns all business policy definitions in this organization. Can be run by any user, node, or agbot.",
        "operationId": "busPolsGetRoute",
        "summary": "Returns all business policies"
      }
    },
    "/orgs/{orgid}/business/policies/{policy}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Business Policy name.",
            "in": "path",
            "name": "policy",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "policy"
        ],
        "description": "Deletes a business policy. Can only be run by the owning user.",
        "operationId": "busPolDeleteRoute",
        "summary": "Deletes a business policy"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Business Policy name.",
            "in": "path",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire business policy resource will be returned.",
            "in": "query",
            "name": "description",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "businessPolicy": {
                  "orgid/mybuspol": {
                    "constraints": [
                      "a == b"
                    ],
                    "created": "string",
                    "description": "string",
                    "label": "string",
                    "lastUpdated": "string",
                    "owner": "string",
                    "properties": [
                      {
                        "name": "string",
                        "type": "string",
                        "value": "string"
                      }
                    ],
                    "service": {
                      "arch": "string",
                      "name": "string",
                      "nodeHealth": {
                        "check_agreement_status": 120,
                        "missing_heartbeat_interval": 600
                      },
                      "org": "string",
                      "serviceVersions": [
                        {
                          "priority": null,
                          "upgradePolicy": null,
                          "version": "1.2.3"
                        }
                      ]
                    },
                    "userInput": []
                  }
                },
                "lastIndex": 0
              }
            },
            "schema": {
              "$ref": "#/definitions/GetBusinessPoliciesResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "policy"
        ],
        "description": "Returns the business policy with the specified id. Can be run by a user, node, or agbot.",
        "operationId": "busPolGetRoute",
        "summary": "Returns a business policy"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Business Policy name.",
            "in": "path",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify only **one** of the attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutBusinessPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "policy"
        ],
        "description": "Updates one attribute of a business policy. This can only be called by the user that originally created this business policy resource.",
        "operationId": "busPolPatchRoute",
        "summary": "Updates 1 attribute of a business policy"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Business Policy name.",
            "in": "path",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutBusinessPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource created - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "policy"
        ],
        "description": "Creates a business policy resource. A business policy resource specifies the service that should be deployed based on the specified properties and constraints. This can only be called by a user.",
        "operationId": "busPolPostRoute",
        "summary": "Adds a business policy"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Business Policy name.",
            "in": "path",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "description": "Business Policy object that needs to be updated. See details in the POST route above.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutBusinessPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource created - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "policy"
        ],
        "description": "Updates a business policy resource. This can only be called by the user that created it.",
        "operationId": "busPolPutRoute",
        "summary": "Updates a business policy"
      }
    },
    "/orgs/{orgid}/business/policies/{policy}/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "policy",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostBusinessPolicySearchRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/PostBusinessPolicySearchResponse"
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          },
          "409": {
            "description": "old session",
            "schema": {
              "$ref": "#/definitions/PolicySearchResponseDesync"
            }
          }
        },
        "tags": [
          "policy"
        ],
        "description": "Returns the matching nodes for this business policy that do not already have an agreement for the specified service. Can be run by a user or agbot (but not a node).",
        "operationId": "busPolPostSearchRoute",
        "summary": "Returns matching nodes for this business policy"
      }
    },
    "/orgs/{orgid}/changes": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceChangesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "changes returned - response body:",
            "schema": {
              "$ref": "#/definitions/ResourceChangesRespObject"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns all the recent resource changes within an org that the caller has permissions to view.",
        "operationId": "orgChangesRoute",
        "summary": "Returns recent changes in this org"
      }
    },
    "/orgs/{orgid}/node-details": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter results to only include nodes with this architecture (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "arch",
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this id (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this name (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this type ('device' or 'cluster')",
            "in": "query",
            "name": "type",
            "type": "string"
          },
          {
            "description": "Organization id",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "[\n  {\n    \"arch\": \"string\",\n    \"connectivity\": {\n      \"string\": boolean,\n      \"string\": boolean\n    },\n    \"constraints\": [\n      \"string\",\n      \"string\",\n      \"string\"\n    ],\n    \"errors\": [\n      {\n        \"event_code\": \"string\",\n        \"hidden\": boolean,\n        \"message\": \"string\",\n        \"record_id\": \"string\"\n      }\n    ],\n    \"heartbeatIntervals\": {\n      \"intervalAdjustment\": 0,\n      \"minInterval\": 0,\n      \"maxInterval\": 0\n    },\n    \"id\": \"string\",\n    \"lastHeartbeat\": \"string\",\n    \"lastUpdatedNode\": \"string\",\n    \"lastUpdatedNodeError\": \"string\",\n    \"lastUpdatedNodePolicy\": \"string\",\n    \"lastUpdatedNodeStatus\": \"string\",\n    \"msgEndPoint\": \"\",\n    \"name\": \"string\",\n    \"nodeType\": \"device\",\n    \"owner\": \"string\",\n    \"orgid\": \"string\",\n    \"pattern\": \"\",\n    \"properties\": [\n      \"string\": \"string\",\n      \"string\": \"string\",\n      \"string\": \"string\"\n    ],\n    \"publicKey\": \"string\",\n    \"registeredServices\": [\n      {\n        \"configState\": \"active\",\n        \"numAgreements\": 0,\n        \"policy\": \"\",\n        \"properties\": [],\n        \"url\": \"string\"\n      },\n      {\n        \"configState\": \"active\",\n        \"numAgreements\": 0,\n        \"policy\": \"\",\n        \"properties\": [],\n        \"url\": \"string\"\n      },\n      {\n        \"configState\": \"active\",\n        \"numAgreements\": 0,\n        \"policy\": \"\",\n        \"properties\": [],\n        \"url\": \"string\",\n      }\n    ],\n    \"runningServices\": \"|orgid/serviceid|\",\n    \"services\": [\n      {\n        \"agreementId\": \"string\",\n        \"arch\": \"string\",\n        \"containerStatus\": [],\n        \"operatorStatus\": {},\n        \"orgid\": \"string\",\n        \"serviceUrl\": \"string\",\n        \"version\": \"string\"\n      }\n    ],\n    \"softwareVersions\": {},\n    \"token\": \"string\",\n    \"userInput\": [\n      {\n        \"inputs\": [\n          {\n            \"name\": \"var1\",\n            \"value\": \"someString\"\n          },\n          {\n            \"name\": \"var2\",\n            \"value\": 5\n          },\n          {\n            \"name\": \"var3\",\n            \"value\": 22.2\n          }\n        ],\n        \"serviceArch\": \"string\",\n        \"serviceOrgid\": \"string\",\n        \"serviceUrl\": \"string\",\n        \"serviceVersionRange\": \"string\"\n      }\n    ],\n  }\n]"
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/NodeDetails"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Returns all nodes with node errors, policy and status",
        "operationId": "nodesGetDetails",
        "summary": "Returns all nodes (edge devices) with node errors, policy and status. Can be run by any user or agbot."
      }
    },
    "/orgs/{orgid}/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this id (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "idfilter",
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this name (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this nodeType ('device' or 'cluster')",
            "in": "query",
            "name": "nodetype",
            "type": "string"
          },
          {
            "description": "Filter results to only include nodes with this arch (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "arch",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"nodes\": {\n    \"orgid/nodeid\": {\n      \"token\": \"string\",\n      \"name\": \"string\",\n      \"owner\": \"string\",\n      \"nodeType\": \"device\",\n      \"pattern\": \"\",\n      \"registeredServices\": [\n        {\n          \"url\": \"string\",\n          \"numAgreements\": 0,\n          \"configState\": \"active\",\n          \"policy\": \"\",\n          \"properties\": []\n        },\n        {\n          \"url\": \"string\",\n          \"numAgreements\": 0,\n          \"configState\": \"active\",\n          \"policy\": \"\",\n          \"properties\": []\n        },\n        {\n          \"url\": \"string\",\n          \"numAgreements\": 0,\n          \"configState\": \"active\",\n          \"policy\": \"\",\n          \"properties\": []\n        }\n      ],\n      \"userInput\": [\n        {\n          \"serviceOrgid\": \"string\",\n          \"serviceUrl\": \"string\",\n          \"serviceArch\": \"string\",\n          \"serviceVersionRange\": \"string\",\n          \"inputs\": [\n            {\n              \"name\": \"var1\",\n              \"value\": \"someString\"\n            },\n            {\n              \"name\": \"var2\",\n              \"value\": 5\n            },\n            {\n              \"name\": \"var3\",\n              \"value\": 22.2\n            }\n          ]\n        }\n      ],\n      \"msgEndPoint\": \"\",\n      \"softwareVersions\": {},\n      \"lastHeartbeat\": \"string\",\n      \"publicKey\": \"string\",\n      \"arch\": \"string\",\n      \"heartbeatIntervals\": {\n        \"minInterval\": 0,\n        \"maxInterval\": 0,\n        \"intervalAdjustment\": 0\n      },\n      \"lastUpdated\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetNodesResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Returns all nodes (edge devices). Can be run by any user or agbot.",
        "operationId": "nodesGetRoute",
        "summary": "Returns all nodes"
      }
    },
    "/orgs/{orgid}/nodes/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Deletes a node (RPi), and deletes the agreements stored for this node (but does not actually cancel the agreements between the node and agbots). Can be run by the owning user or the node.",
        "operationId": "nodeDeleteRoute",
        "summary": "Deletes a node"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which attribute value should be returned. Only 1 attribute can be specified, and it must be 1 of the direct attributes of the node resource (not of the services). If not specified, the entire node resource (including services) will be returned",
            "in": "query",
            "name": "attribute",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "lastIndex": 0,
                "nodes": {
                  "orgid/nodeid": {
                    "arch": "string",
                    "heartbeatIntervals": {
                      "intervalAdjustment": 0,
                      "maxInterval": 0,
                      "minInterval": 0
                    },
                    "lastHeartbeat": "string",
                    "lastUpdated": "string",
                    "msgEndPoint": "",
                    "name": "string",
                    "nodeType": "device",
                    "owner": "string",
                    "pattern": "",
                    "publicKey": "string",
                    "registeredServices": [
                      {
                        "configState": "active",
                        "numAgreements": 0,
                        "policy": "",
                        "properties": [],
                        "url": "string"
                      },
                      {
                        "configState": "active",
                        "numAgreements": 0,
                        "policy": "",
                        "properties": [],
                        "url": "string"
                      },
                      {
                        "configState": "active",
                        "numAgreements": 0,
                        "policy": "",
                        "properties": [],
                        "url": "string"
                      }
                    ],
                    "softwareVersions": {},
                    "token": "string",
                    "userInput": [
                      {
                        "inputs": [
                          {
                            "name": "var1",
                            "value": "someString"
                          },
                          {
                            "name": "var2",
                            "value": 5
                          },
                          {
                            "name": "var3",
                            "value": 22.2
                          }
                        ],
                        "serviceArch": "string",
                        "serviceOrgid": "string",
                        "serviceUrl": "string",
                        "serviceVersionRange": "string"
                      }
                    ]
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/GetNodesResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Returns the node (edge device) with the specified id. Can be run by that node, a user, or an agbot.",
        "operationId": "nodeGetRoute",
        "summary": "Returns a node"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify only **one** of the following attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchNodesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Updates some attributes of a node. This can be called by the user or the node.",
        "operationId": "nodePatchRoute",
        "summary": "Updates 1 attribute of a node"
      }
    },
    "/orgs/{orgid}/nodes/{id}/agreements": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"agreements\": {\n    \"agreementname\": {\n      \"services\": [\n        { \"orgid\": \"string\", \"url\": \"string\"},\n          ...\n      ],\n      \"agrService\": {\n        \"orgid\": \"string\",\n        \"pattern\": \"string\",\n        \"url\": \"string\"\n      },\n      \"state\": \"string\",\n      \"lastUpdated\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetNodeAgreementsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/agreement"
        ],
        "description": "Returns all agreements that this node is part of. Can be run by a user or the node.",
        "operationId": "nodeGetAgreementsRoute",
        "summary": "Returns all agreements this node is in"
      }
    },
    "/orgs/{orgid}/nodes/{id}/agreements/{agid}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the agreement.",
            "in": "path",
            "name": "agid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"agreements\": {\n    \"agreementname\": {\n      \"services\": [\n        { \"orgid\": \"string\", \"url\": \"string\"},\n          ...\n      ],\n      \"agrService\": {\n        \"orgid\": \"string\",\n        \"pattern\": \"string\",\n        \"url\": \"string\"\n      },\n      \"state\": \"string\",\n      \"lastUpdated\": \"string\"\n    }\n  },\n  \"lastIndex\": 0\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetNodeAgreementsResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/agreement"
        ],
        "description": "Returns the agreement with the specified agid for the specified node id. Can be run by a user or the node.",
        "operationId": "nodeGetAgreementRoute",
        "summary": "Returns an agreement for a node"
      }
    },
    "/orgs/{orgid}/nodes/{id}/errors": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/error"
        ],
        "description": "Deletes the error list of a node. Can be run by the owning user or the node.",
        "operationId": "nodeDeleteErrorsRoute",
        "summary": "Deletes the error list of a node"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/NodeError"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/error"
        ],
        "description": "Returns any node errors. Can be run by any user or the node.",
        "operationId": "nodeGetErrorsRoute",
        "summary": "Returns the node errors"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutNodeErrorRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/error"
        ],
        "description": "Adds or updates any error of a node. This is called by the node or owning user.",
        "operationId": "nodePutErrorsRoute",
        "summary": "Adds/updates node error list"
      }
    },
    "/orgs/{orgid}/nodes/{id}/heartbeat": {
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Lets the exchange know this node is still active so it is still a candidate for contracting. Can be run by the owning user or the node.",
        "operationId": "nodeHeartbeatRoute",
        "summary": "Tells the exchange this node is still operating"
      }
    },
    "/orgs/{orgid}/nodes/{id}/policy": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/policy"
        ],
        "description": "Deletes the policy of a node. Can be run by the owning user or the node.",
        "operationId": "nodeDeletePolicyRoute",
        "summary": "Deletes the policy of a node"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/NodePolicy"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/policy"
        ],
        "description": "Returns the node run time policy. Can be run by a user or the node.",
        "operationId": "nodeGetPolicyRoute",
        "summary": "Returns the node policy"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutNodePolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/policy"
        ],
        "description": "Adds or updates the policy of a node. This is called by the node or owning user.",
        "operationId": "nodePutPolicyRoute",
        "summary": "Adds/updates the node policy"
      }
    },
    "/orgs/{orgid}/nodes/{id}/services_configstate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostNodeConfigStateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Suspends (or resumes) 1 or more services on this edge node. Can be run by the node owner or the node.",
        "operationId": "nodePostConfigStateRoute",
        "summary": "Changes config state of registered services"
      }
    },
    "/orgs/{orgid}/nodes/{id}/status": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/status"
        ],
        "description": "Deletes the status of a node. Can be run by the owning user or the node.",
        "operationId": "nodeDeleteStatusRoute",
        "summary": "Deletes the status of a node"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "connectivity": {
                  "string": true
                },
                "lastUpdated": "string",
                "runningServices": "|orgid/serviceid|",
                "services": [
                  {
                    "agreementId": "string",
                    "arch": "string",
                    "containerStatus": [],
                    "operatorStatus": {},
                    "orgid": "string",
                    "serviceUrl": "string",
                    "version": "string"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/NodeStatus"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/status"
        ],
        "description": "Returns the node run time status, for example service container status. Can be run by a user or the node.",
        "operationId": "nodeGetStatusRoute",
        "summary": "Returns the node status"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node to be updated.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutNodeStatusRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node/status"
        ],
        "description": "Adds or updates the run time status of a node. This is called by the node or owning user.",
        "operationId": "nodePutStatusRoute",
        "summary": "Adds/updates the node status"
      }
    },
    "/orgs/{orgid}/patterns": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this id (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "idfilter",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this public setting",
            "in": "query",
            "name": "public",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this label (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "label",
            "type": "string"
          },
          {
            "description": "Filter results to only include patterns with this description (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "description",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"patterns\": {\n    \"orgid/patternname\": {\n      \"owner\": \"string\",\n      \"label\": \"My Pattern\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"services\": [\n        {\n          \"serviceUrl\": \"string\",\n          \"serviceOrgid\": \"string\",\n          \"serviceArch\": \"string\",\n          \"agreementLess\": false,\n          \"serviceVersions\": [\n            {\n              \"version\": \"4.5.6\",\n              \"deployment_overrides\": \"string\",\n              \"deployment_overrides_signature\": \"a\",\n              \"priority\": {\n                \"priority_value\": 50,\n                \"retries\": 1,\n                \"retry_durations\": 3600,\n                \"verified_durations\": 52\n              },\n              \"upgradePolicy\": {\n                \"lifecycle\": \"immediate\",\n                \"time\": \"01:00AM\"\n              }\n            }\n          ],\n          \"dataVerification\": {\n            \"metering\": {\n              \"tokens\": 1,\n              \"per_time_unit\": \"min\",\n              \"notification_interval\": 30\n            },\n            \"URL\": \"\",\n            \"enabled\": true,\n            \"interval\": 240,\n            \"check_rate\": 15,\n            \"user\": \"\",\n            \"password\": \"\"\n          },\n          \"nodeHealth\": {\n            \"missing_heartbeat_interval\": 600,\n            \"check_agreement_status\": 120\n          }\n        }\n      ],\n      \"userInput\": [],\n      \"agreementProtocols\": [\n        {\n          \"name\": \"Basic\"\n        }\n      ],\n      \"lastUpdated\": \"2019-05-14T16:34:34.194Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetPatternsResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Returns all pattern definitions in this organization. Can be run by any user, node, or agbot.",
        "operationId": "patternsGetRoute",
        "summary": "Returns all patterns"
      }
    },
    "/orgs/{orgid}/patterns/{pattern}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Deletes a pattern. Can only be run by the owning user.",
        "operationId": "patternDeleteRoute",
        "summary": "Deletes a pattern"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern id.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire pattern resource will be returned",
            "in": "query",
            "name": "attribute",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "lastIndex": 0,
                "patterns": {
                  "orgid/patternname": {
                    "agreementProtocols": [
                      {
                        "name": "Basic"
                      }
                    ],
                    "description": "blah blah",
                    "label": "My Pattern",
                    "lastUpdated": "2019-05-14T16:34:34.194Z[UTC]",
                    "owner": "string",
                    "public": true,
                    "services": [
                      {
                        "agreementLess": false,
                        "dataVerification": {
                          "URL": "",
                          "check_rate": 15,
                          "enabled": true,
                          "interval": 240,
                          "metering": {
                            "notification_interval": 30,
                            "per_time_unit": "min",
                            "tokens": 1
                          },
                          "password": "",
                          "user": ""
                        },
                        "nodeHealth": {
                          "check_agreement_status": 120,
                          "missing_heartbeat_interval": 600
                        },
                        "serviceArch": "string",
                        "serviceOrgid": "string",
                        "serviceUrl": "string",
                        "serviceVersions": [
                          {
                            "deployment_overrides": "string",
                            "deployment_overrides_signature": "a",
                            "priority": {
                              "priority_value": 50,
                              "retries": 1,
                              "retry_durations": 3600,
                              "verified_durations": 52
                            },
                            "upgradePolicy": {
                              "lifecycle": "immediate",
                              "time": "01:00AM"
                            },
                            "version": "4.5.6"
                          }
                        ]
                      }
                    ],
                    "userInput": []
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/GetPatternsResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Returns the pattern with the specified id. Can be run by a user, node, or agbot.",
        "operationId": "patternGetRoute",
        "summary": "Returns a pattern"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify only **one** of the attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchPatternRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Updates one attribute of a pattern. This can only be called by the user that originally created this pattern resource.",
        "operationId": "patternPatchRoute",
        "summary": "Updates 1 attribute of a pattern"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutPatternRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource created - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Creates a pattern resource. A pattern resource specifies all of the services that should be deployed for a type of node. When a node registers with Horizon, it can specify a pattern name to quickly tell Horizon what should be deployed on it. This can only be called by a user.",
        "operationId": "patternPostRoute",
        "summary": "Adds a pattern"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "description": "See details in the POST route.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutPatternRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "resource created - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Creates a pattern resource. A pattern resource specifies all of the services that should be deployed for a type of node. When a node registers with Horizon, it can specify a pattern name to quickly tell Horizon what should be deployed on it. This can only be called by a user.",
        "operationId": "patternPuttRoute",
        "summary": "Adds a pattern"
      }
    },
    "/orgs/{orgid}/patterns/{pattern}/keys": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern/key"
        ],
        "description": "Deletes all of the current keys/certs for this pattern. This can only be run by the pattern owning user.",
        "operationId": "patternDeleteKeysRoute",
        "summary": "Deletes all keys of a pattern"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ListObject"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern/key"
        ],
        "description": "Returns all the signing public keys/certs for this pattern. Can be run by any credentials able to view the pattern.",
        "operationId": "patternGetKeysRoute",
        "summary": "Returns all keys/certs for this pattern"
      }
    },
    "/orgs/{orgid}/patterns/{pattern}/keys/{keyid}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the key.",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern/key"
        ],
        "description": "Deletes a key/cert for this pattern. This can only be run by the pattern owning user.",
        "operationId": "patternDeleteKeyRoute",
        "summary": "Deletes a key of a pattern"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "description": "Signing public key/certificate identifier.",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern/key"
        ],
        "description": "Returns the signing public key/cert with the specified keyid for this pattern. The raw content of the key/cert is returned, not json. Can be run by any credentials able to view the pattern.",
        "operationId": "patternGetKeyRoute",
        "summary": "Returns a key/cert for this pattern"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the pattern to be updated.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the key to be added/updated.",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Note that the input body is just the bytes of the key/cert (not the typical json), so the 'Content-Type' header must be set to 'text/plain'.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutPatternKeyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern/key"
        ],
        "description": "Adds a new signing public key/cert, or updates an existing key/cert, for this pattern. This can only be run by the pattern owning user.",
        "operationId": "patternPutKeyRoute",
        "summary": "Adds/updates a key/cert for the pattern"
      }
    },
    "/orgs/{orgid}/patterns/{pattern}/nodehealth": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostNodeHealthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"nodes\": {\n    \"string\": {\n      \"lastHeartbeat\": \"string\",\n      \"agreements\": {\n        \"string\": {\n          \"lastUpdated\": \"string\"\n        },\n          ...\n      }\n    },\n      ...\n  }\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/PostNodeHealthResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Returns the lastHeartbeat and agreement times for all nodes that are this pattern and have changed since the specified lastTime. Can be run by a user or agbot (but not a node).",
        "operationId": "patternNodeHealthRoute",
        "summary": "Returns agreement health of nodes of a particular pattern"
      }
    },
    "/orgs/{orgid}/patterns/{pattern}/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pattern name.",
            "in": "path",
            "name": "pattern",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPatternSearchRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/PostPatternSearchResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "pattern"
        ],
        "description": "Returns the matching nodes that are using this pattern and do not already have an agreement for the specified service. Can be run by a user or agbot (but not a node).",
        "operationId": "patternPostSearchRoute",
        "summary": "Returns matching nodes of a particular pattern"
      }
    },
    "/orgs/{orgid}/search/nodehealth": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostNodeHealthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body:",
            "examples": {
              "application/json": "{\n  \"nodes\": {\n    \"string\": {\n      \"lastHeartbeat\": \"string\",\n      \"agreements\": {\n        \"string\": {\n          \"lastUpdated\": \"string\"\n        },\n          ...\n      }\n    },\n      ...\n  }\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/PostNodeHealthResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns the lastHeartbeat and agreement times for all nodes in this org that do not have a pattern and have changed since the specified lastTime. Can be run by a user or agbot (but not a node).",
        "operationId": "orgPostNodesHealthRoute",
        "summary": "Returns agreement health of nodes with no pattern"
      }
    },
    "/orgs/{orgid}/search/nodes/error": {
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response body:",
            "schema": {
              "$ref": "#/definitions/PostNodeErrorResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns a list of the id's of nodes in an error state. Can be run by a user or agbot (but not a node). No request body is currently required.",
        "operationId": "orgPostNodesErrorRoute",
        "summary": "Returns nodes in an error state"
      }
    },
    "/orgs/{orgid}/search/nodes/error/all": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "response body:",
            "schema": {
              "$ref": "#/definitions/AllNodeErrorsInOrgResp"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns a list of all the node errors for an organization (that the caller has access to see) in an error state. Can be run by a user or agbot.",
        "operationId": "nodeGetAllErrorsRoute",
        "summary": "Returns all node errors"
      }
    },
    "/orgs/{orgid}/search/nodes/service": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostServiceSearchRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body:",
            "examples": {
              "application/json": {
                "nodes": [
                  {
                    "string": "string"
                  }
                ]
              }
            },
            "schema": {
              "$ref": "#/definitions/PostServiceSearchResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "organization"
        ],
        "description": "Returns a list of all the nodes a service is running on. Can be run by a user or agbot (but not a node).",
        "operationId": "orgPostNodesServiceRoute",
        "summary": "Returns the nodes a service is running on"
      }
    },
    "/orgs/{orgid}/services": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this owner (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this public setting",
            "in": "query",
            "name": "public",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this url (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "url",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this version (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "version",
            "type": "string"
          },
          {
            "description": "Filter results to only include services with this arch (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "arch",
            "type": "string"
          },
          {
            "description": "Filter results to only include services that are deployable on this nodeType. Valid values: devices or clusters",
            "in": "query",
            "name": "nodetype",
            "type": "string"
          },
          {
            "description": "Filter results to only include services that use this service with this url (can include % for wildcard - the URL encoding for % is %25)",
            "in": "query",
            "name": "requiredurl",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"services\": {\n    \"orgid/servicename\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"blah blah\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"1.2.3\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.221Z[UTC]\"\n    },\n    \"orgid/servicename2\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"string\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"4.5.6\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [\n        {\n          \"url\": \"string\",\n          \"org\": \"string\",\n          \"version\": \"[1.0.0,INFINITY)\",\n          \"versionRange\": \"[1.0.0,INFINITY)\",\n          \"arch\": \"string\"\n        }\n      ],\n      \"userInput\": [\n        {\n          \"name\": \"foo\",\n          \"label\": \"The Foo Value\",\n          \"type\": \"string\",\n          \"defaultValue\": \"bar\"\n        }\n      ],\n      \"deployment\": \"string\",\n      \"deploymentSignature\": \"string\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-05-14T16:20:40.680Z[UTC]\"\n    },\n    \"orgid/servicename3\": {\n      \"owner\": \"string\",\n      \"label\": \"string\",\n      \"description\": \"fake\",\n      \"public\": true,\n      \"documentation\": \"\",\n      \"url\": \"string\",\n      \"version\": \"string\",\n      \"arch\": \"string\",\n      \"sharable\": \"singleton\",\n      \"matchHardware\": {},\n      \"requiredServices\": [],\n      \"userInput\": [],\n      \"deployment\": \"\",\n      \"deploymentSignature\": \"\",\n      \"clusterDeployment\": \"\",\n      \"clusterDeploymentSignature\": \"\",\n      \"imageStore\": {},\n      \"lastUpdated\": \"2019-12-13T15:38:57.679Z[UTC]\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}"
            },
            "schema": {
              "$ref": "#/definitions/GetServicesResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service"
        ],
        "description": "Returns all service definitions in this organization. Can be run by any user, node, or agbot.",
        "operationId": "servicesGetRoute",
        "summary": "Returns all services"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutServiceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource created - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service"
        ],
        "description": "A service resource contains the metadata that Horizon needs to deploy the docker images that implement this service. A service can either be an edge application, or a lower level edge service that provides access to sensors or reusable features. The service can require 1 or more other services that Horizon should also deploy when deploying this service. If public is set to true, the service can be shared across organizations. This can only be called by a user.",
        "operationId": "servicePostRoute",
        "summary": "Adds a service"
      }
    },
    "/orgs/{orgid}/services/{service}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service"
        ],
        "description": "Deletes a service. Can only be run by the owning user.",
        "operationId": "serviceDeleteRoute",
        "summary": "Deletes a service"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service id.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which attribute value should be returned. Only 1 attribute can be specified. If not specified, the entire service resource will be returned",
            "in": "query",
            "name": "attribute",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "lastIndex": 0,
                "services": {
                  "orgid/servicename": {
                    "arch": "string",
                    "clusterDeployment": "",
                    "clusterDeploymentSignature": "",
                    "deployment": "string",
                    "deploymentSignature": "string",
                    "description": "blah blah",
                    "documentation": "",
                    "imageStore": {},
                    "label": "string",
                    "lastUpdated": "2019-05-14T16:20:40.221Z[UTC]",
                    "matchHardware": {},
                    "owner": "string",
                    "public": true,
                    "requiredServices": [],
                    "sharable": "singleton",
                    "url": "string",
                    "userInput": [],
                    "version": "1.2.3"
                  },
                  "orgid/servicename2": {
                    "arch": "string",
                    "clusterDeployment": "",
                    "clusterDeploymentSignature": "",
                    "deployment": "string",
                    "deploymentSignature": "string",
                    "description": "string",
                    "documentation": "",
                    "imageStore": {},
                    "label": "string",
                    "lastUpdated": "2019-05-14T16:20:40.680Z[UTC]",
                    "matchHardware": {},
                    "owner": "string",
                    "public": true,
                    "requiredServices": [
                      {
                        "arch": "string",
                        "org": "string",
                        "url": "string",
                        "version": "[1.0.0,INFINITY)",
                        "versionRange": "[1.0.0,INFINITY)"
                      }
                    ],
                    "sharable": "singleton",
                    "url": "string",
                    "userInput": [
                      {
                        "defaultValue": "bar",
                        "label": "The Foo Value",
                        "name": "foo",
                        "type": "string"
                      }
                    ],
                    "version": "4.5.6"
                  },
                  "orgid/servicename3": {
                    "arch": "string",
                    "clusterDeployment": "",
                    "clusterDeploymentSignature": "",
                    "deployment": "",
                    "deploymentSignature": "",
                    "description": "fake",
                    "documentation": "",
                    "imageStore": {},
                    "label": "string",
                    "lastUpdated": "2019-12-13T15:38:57.679Z[UTC]",
                    "matchHardware": {},
                    "owner": "string",
                    "public": true,
                    "requiredServices": [],
                    "sharable": "singleton",
                    "url": "string",
                    "userInput": [],
                    "version": "string"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/GetServicesResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service"
        ],
        "description": "Returns the service with the specified id. Can be run by a user, node, or agbot.",
        "operationId": "serviceGetRoute",
        "summary": "Returns a service"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify only **one** of the attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchServiceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service"
        ],
        "description": "Updates one attribute of a service. This can only be called by the user that originally created this service resource.",
        "operationId": "servicePatchRoute",
        "summary": "Updates 1 attribute of a service"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service id.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PostPutServiceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service"
        ],
        "description": "Does a full replace of an existing service. See the description of the body fields in the POST method. This can only be called by the user that originally created it.",
        "operationId": "servicePutRoute",
        "summary": "Updates a service"
      }
    },
    "/orgs/{orgid}/services/{service}/dockauths": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/docker-authorization"
        ],
        "description": "Deletes all of the current docker image auth tokens for this service. This can only be run by the service owning user.",
        "operationId": "serviceDeleteDockauthsRoute",
        "summary": "Deletes all docker image auth tokens of a service"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "\n  [\n    {\n      \"dockAuthId\": 0,\n      \"registry\": \"string\",\n      \"username\": \"string\",\n      \"token\": string,\n      \"lastUpdated\": string\n    },\n      ...\n  ]\n"
            },
            "schema": {
              "$ref": "#/definitions/ListObject"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/docker-authorization"
        ],
        "description": "Returns all the docker image authentication tokens for this service. Can be run by any credentials able to view the service.",
        "operationId": "serviceGetDockauthsRoute",
        "summary": "Returns all docker image tokens for this service"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the service to be updated.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutServiceDockAuthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/docker-authorization"
        ],
        "description": "Adds a new docker image authentication token for this service. As an optimization, if a dockauth resource already exists with the same service, registry, username, and token, this method will just update that lastupdated field. This can only be run by the service owning user.",
        "operationId": "servicePostDockauthRoute",
        "summary": "Adds a docker image token for the service"
      }
    },
    "/orgs/{orgid}/services/{service}/dockauths/{dockauthid}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the dockauth.",
            "in": "path",
            "name": "dockauthid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/docker-authorization"
        ],
        "description": "Deletes a docker image auth token for this service. This can only be run by the service owning user.",
        "operationId": "serviceDeleteDockauthRoute",
        "summary": "Deletes a docker image auth token of a service"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the dockauth.",
            "in": "path",
            "name": "dockauthid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ServiceDockAuth"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/docker-authorization"
        ],
        "description": "Returns the docker image authentication token with the specified dockauthid for this service. Can be run by any credentials able to view the service.",
        "operationId": "serviceGetDockauthRoute",
        "summary": "Returns a docker image token for this service"
      },
      "put": {
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the service to be updated.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the dockauth.",
            "in": "path",
            "name": "dockauthid",
            "required": true,
            "type": "string"
          },
          {
            "description": "See the POST route for details.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutServiceDockAuthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/docker-authorization"
        ],
        "description": "Updates an existing docker image authentication token for this service. This can only be run by the service owning user.",
        "operationId": "servicePutDockauthRoute",
        "summary": "Updates a docker image token for the service"
      }
    },
    "/orgs/{orgid}/services/{service}/keys": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/key"
        ],
        "description": "Deletes all of the current keys/certs for this service. This can only be run by the service owning user.",
        "operationId": "serviceDeleteKeysRoute",
        "summary": "Deletes all keys of a service"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": [
                "mykey.pem"
              ]
            },
            "schema": {
              "$ref": "#/definitions/ListObject"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/key"
        ],
        "description": "Returns all the signing public keys/certs for this service. Can be run by any credentials able to view the service.",
        "operationId": "serviceGetKeysRoute",
        "summary": "Returns all keys/certs for this service"
      }
    },
    "/orgs/{orgid}/services/{service}/keys/{keyid}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the key.",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/key"
        ],
        "description": "Deletes a key/cert for this service. This can only be run by the service owning user.",
        "operationId": "serviceDeleteKeyRoute",
        "summary": "Deletes a key of a service"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Service name.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "Key Id.",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/key"
        ],
        "description": "Returns the signing public key/cert with the specified keyid for this service. The raw content of the key/cert is returned, not json. Can be run by any credentials able to view the service.",
        "operationId": "serviceGetKeyRoute",
        "summary": "Returns a key/cert for this service"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the service to be updated.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the key to be added/updated.",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Note that the input body is just the bytes of the key/cert (not the typical json), so the 'Content-Type' header must be set to 'text/plain'.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutServiceKeyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/key"
        ],
        "description": "Adds a new signing public key/cert, or updates an existing key/cert, for this service. This can only be run by the service owning user.",
        "operationId": "servicePutKeyRoute",
        "summary": "Adds/updates a key/cert for the service"
      }
    },
    "/orgs/{orgid}/services/{service}/policy": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the service.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/policy"
        ],
        "description": "Deletes the policy of a service. Can be run by the owning user.",
        "operationId": "serviceDeletePolicyRoute",
        "summary": "Deletes the policy of a service"
      },
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the service.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ServicePolicy"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/policy"
        ],
        "description": "Returns the service policy. Can be run by a user, node or agbot.",
        "operationId": "serviceGetPolicyRoute",
        "summary": "Returns the service policy"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the service to be updated.",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutServicePolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response body",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "service/policy"
        ],
        "description": "Adds or updates the policy of a service. This can be called by the owning user.",
        "operationId": "servicePutPolicyRoute",
        "summary": "Adds/updates the service policy"
      }
    },
    "/orgs/{orgid}/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": "{\n  \"users\": {\n    \"orgid/username\": {\n      \"password\": \"string\",\n      \"admin\": false,\n      \"email\": \"string\",\n      \"lastUpdated\": \"string\",\n      \"updatedBy\": \"string\"\n    },\n    \"orgid/username\": {\n      \"password\": \"string\",\n      \"admin\": false,\n      \"email\": \"string\",\n      \"lastUpdated\": \"string\",\n      \"updatedBy\": \"string\"\n    },\n      ...\n  },\n  \"lastIndex\": 0\n}\n"
            },
            "schema": {
              "$ref": "#/definitions/GetUsersResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Returns all users. Can only be run by the root user, org admins, and hub admins.",
        "operationId": "usersGetRoute",
        "summary": "Returns all users"
      }
    },
    "/orgs/{orgid}/users/{username}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of the user.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Deletes a user and all of its nodes and agbots. This can only be called by root or a user in the org with the admin role.",
        "operationId": "userDeleteRoute",
        "summary": "Deletes a user"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of the user.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response body",
            "examples": {
              "application/json": {
                "lastIndex": 0,
                "users": {
                  "orgid/username": {
                    "admin": false,
                    "email": "string",
                    "lastUpdated": "string",
                    "password": "string",
                    "updatedBy": "string"
                  }
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/GetUsersResponse"
            }
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Returns the specified username. Can only be run by that user or root.",
        "operationId": "userGetRoute",
        "summary": "Returns a user"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of the user.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Specify only **one** of the attributes:",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchUsersRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Updates 1 attribute of an existing user. Only the user itself, root, or a user with admin privilege can update an existing user.",
        "operationId": "userPatchRoute",
        "summary": "Updates 1 attribute of a user"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of the user.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutUsersRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource created - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Creates a new user. This can be run root/root, or a user with admin privilege.",
        "operationId": "userPostRoute",
        "summary": "Adds a user"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of the user.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "See details in the POST route.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostPutUsersRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Updates an existing user. Only the user itself, root, or a user with admin privilege can update an existing user.",
        "operationId": "userPutRoute",
        "summary": "Updates a user"
      }
    },
    "/orgs/{orgid}/users/{username}/changepw": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of the user.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePwRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "password updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Changes the user's password. Only the user itself, root, or a user with admin privilege can update an existing user's password.",
        "operationId": "userChangePwRoute",
        "summary": "Changes the user's password"
      }
    },
    "/orgs/{orgid}/users/{username}/confirm": {
      "post": {
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of the user.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "post ok"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "user"
        ],
        "description": "Confirms whether or not this username exists and has the specified password. This can only be called by root or a user in the org with the admin role.",
        "operationId": "userConfirmRoute",
        "summary": "Confirms if this username/password is valid"
      }
    },
    "/orgs/{orgid}/{id}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Organization id.",
            "in": "path",
            "name": "orgid",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the node.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutNodesRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "resource add/updated - response body:",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "400": {
            "description": "bad input"
          },
          "401": {
            "description": "invalid credentials"
          },
          "403": {
            "description": "access denied"
          },
          "404": {
            "description": "not found"
          }
        },
        "tags": [
          "node"
        ],
        "description": "Adds a new edge node, or updates an existing node. This must be called by the user to add a node, and then can be called by that user or node to update itself.",
        "operationId": "nodePutRoute",
        "summary": "Add/updates a node"
      }
    }
  },
  "definitions": {
    "AdminHashpwRequest": {
      "properties": {
        "password": {
          "type": "string"
        }
      },
      "required": [
        "password"
      ],
      "type": "object"
    },
    "Agbot": {
      "properties": {
        "lastHeartbeat": {
          "type": "string"
        },
        "msgEndPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "AgbotBusinessPol": {
      "properties": {
        "businessPol": {
          "type": "string"
        },
        "businessPolOrgid": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "nodeOrgid": {
          "type": "string"
        }
      },
      "required": [
        "businessPol",
        "businessPolOrgid",
        "lastUpdated",
        "nodeOrgid"
      ],
      "type": "object"
    },
    "AgbotPattern": {
      "properties": {
        "lastUpdated": {
          "type": "string"
        },
        "nodeOrgid": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "patternOrgid": {
          "type": "string"
        }
      },
      "required": [
        "lastUpdated",
        "nodeOrgid",
        "pattern",
        "patternOrgid"
      ],
      "type": "object"
    },
    "AllNodeErrorsInOrgResp": {
      "properties": {
        "nodeErrors": {
          "items": {
            "$ref": "#/definitions/NodeErrorsResp"
          },
          "properties": {
            "last0": {
              "items": {
                "$ref": "#/definitions/NodeErrorsResp"
              },
              "properties": {
                "empty": {
                  "type": "boolean"
                },
                "head": {
                  "$ref": "#/definitions/NodeErrorsResp"
                },
                "tl": {
                  "items": {
                    "$ref": "#/definitions/NodeErrorsResp"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    },
                    "traversableAgain": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "empty"
                  ],
                  "type": "array"
                },
                "traversableAgain": {
                  "type": "boolean"
                }
              },
              "required": [
                "head",
                "tl"
              ],
              "type": "array"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "nodeErrors"
      ],
      "type": "object"
    },
    "ApiResponse": {
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "msg"
      ],
      "type": "object"
    },
    "BService": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodeHealth": {
          "$ref": "#/definitions/MapStringObject"
        },
        "org": {
          "type": "string"
        },
        "serviceVersions": {
          "items": {
            "$ref": "#/definitions/BServiceVersions"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "arch",
        "name",
        "org",
        "serviceVersions"
      ],
      "type": "object"
    },
    "BServiceVersions": {
      "properties": {
        "priority": {
          "$ref": "#/definitions/MapStringObject"
        },
        "upgradePolicy": {
          "$ref": "#/definitions/MapStringString"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "priority",
        "upgradePolicy",
        "version"
      ],
      "type": "object"
    },
    "BusinessPolicy": {
      "properties": {
        "constraints": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/OneProperty"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "service": {
          "$ref": "#/definitions/BService"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "owner"
      ],
      "type": "object"
    },
    "BusinessPolicyNodeResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "nodeType",
        "publicKey"
      ],
      "type": "object"
    },
    "ChangeEntry": {
      "properties": {
        "id": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "orgId": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "resourceChanges": {
          "items": {
            "$ref": "#/definitions/ResourceChangesInnerObject"
          },
          "properties": {
            "last0": {
              "items": {
                "$ref": "#/definitions/ResourceChangesInnerObject"
              },
              "properties": {
                "empty": {
                  "type": "boolean"
                },
                "head": {
                  "$ref": "#/definitions/ResourceChangesInnerObject"
                },
                "tl": {
                  "items": {
                    "$ref": "#/definitions/ResourceChangesInnerObject"
                  },
                  "properties": {
                    "empty": {
                      "type": "boolean"
                    },
                    "traversableAgain": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "empty"
                  ],
                  "type": "array"
                },
                "traversableAgain": {
                  "type": "boolean"
                }
              },
              "required": [
                "head",
                "tl"
              ],
              "type": "array"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "operation",
        "orgId",
        "resource",
        "resourceChanges"
      ],
      "type": "object"
    },
    "ChangePwRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "required": [
        "newPassword"
      ],
      "type": "object"
    },
    "ContainerStatus": {
      "properties": {
        "created": {
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "created",
        "image",
        "name",
        "state"
      ],
      "type": "object"
    },
    "Formats": {
      "type": "object"
    },
    "GetAdminStatusResponse": {
      "properties": {
        "dbSchemaVersion": {
          "format": "int32",
          "type": "integer"
        },
        "msg": {
          "type": "string"
        },
        "numberOfAgbotAgreements": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfAgbotMsgs": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfAgbots": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfNodeAgreements": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfNodeMsgs": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfNodes": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfUsers": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "dbSchemaVersion",
        "msg",
        "numberOfAgbotAgreements",
        "numberOfAgbotMsgs",
        "numberOfAgbots",
        "numberOfNodeAgreements",
        "numberOfNodeMsgs",
        "numberOfNodes",
        "numberOfUsers"
      ],
      "type": "object"
    },
    "GetAgbotBusinessPolsResponse": {
      "properties": {
        "businessPols": {
          "additionalProperties": {
            "$ref": "#/definitions/AgbotBusinessPol"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "businessPols"
      ],
      "type": "object"
    },
    "GetAgbotPatternsResponse": {
      "properties": {
        "patterns": {
          "additionalProperties": {
            "$ref": "#/definitions/AgbotPattern"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "patterns"
      ],
      "type": "object"
    },
    "GetAgbotsResponse": {
      "properties": {
        "agbots": {
          "additionalProperties": {
            "$ref": "#/definitions/Agbot"
          },
          "properties": {},
          "type": "object"
        },
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "agbots",
        "lastIndex"
      ],
      "type": "object"
    },
    "GetBusinessPoliciesResponse": {
      "properties": {
        "businessPolicy": {
          "additionalProperties": {
            "$ref": "#/definitions/BusinessPolicy"
          },
          "properties": {},
          "type": "object"
        },
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "businessPolicy",
        "lastIndex"
      ],
      "type": "object"
    },
    "GetNodeAgreementsResponse": {
      "properties": {
        "agreements": {
          "additionalProperties": {
            "$ref": "#/definitions/NodeAgreement"
          },
          "properties": {},
          "type": "object"
        },
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "agreements",
        "lastIndex"
      ],
      "type": "object"
    },
    "GetNodesResponse": {
      "properties": {
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        },
        "nodes": {
          "additionalProperties": {
            "$ref": "#/definitions/Node"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "lastIndex",
        "nodes"
      ],
      "type": "object"
    },
    "GetOrgsResponse": {
      "properties": {
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        },
        "orgs": {
          "additionalProperties": {
            "$ref": "#/definitions/Org"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "lastIndex",
        "orgs"
      ],
      "type": "object"
    },
    "GetPatternsResponse": {
      "properties": {
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        },
        "patterns": {
          "additionalProperties": {
            "$ref": "#/definitions/Pattern"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "lastIndex",
        "patterns"
      ],
      "type": "object"
    },
    "GetServicesResponse": {
      "properties": {
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        },
        "services": {
          "additionalProperties": {
            "$ref": "#/definitions/Service"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "lastIndex",
        "services"
      ],
      "type": "object"
    },
    "GetUsersResponse": {
      "properties": {
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        },
        "users": {
          "additionalProperties": {
            "$ref": "#/definitions/User"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "lastIndex",
        "users"
      ],
      "type": "object"
    },
    "ListObject": {
      "items": {
        "type": "object"
      },
      "properties": {
        "empty": {
          "type": "boolean"
        },
        "traversableAgain": {
          "type": "boolean"
        }
      },
      "required": [
        "empty"
      ],
      "type": "array"
    },
    "MapStringObject": {
      "additionalProperties": {
        "type": "object"
      },
      "properties": {},
      "type": "object"
    },
    "MapStringString": {
      "additionalProperties": {
        "type": "string"
      },
      "properties": {},
      "type": "object"
    },
    "MaxChangeIdResponse": {
      "properties": {
        "maxChangeId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "maxChangeId"
      ],
      "type": "object"
    },
    "NAService": {
      "properties": {
        "orgid": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "orgid",
        "url"
      ],
      "type": "object"
    },
    "NAgrService": {
      "properties": {
        "orgid": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "orgid",
        "pattern",
        "url"
      ],
      "type": "object"
    },
    "Node": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "heartbeatIntervals": {
          "$ref": "#/definitions/NodeHeartbeatIntervals"
        },
        "lastHeartbeat": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "msgEndPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "registeredServices": {
          "items": {
            "$ref": "#/definitions/RegService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "softwareVersions": {
          "additionalProperties": {
            "type": "string"
          },
          "properties": {},
          "type": "object"
        },
        "token": {
          "type": "string"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "softwareVersions",
        "token"
      ],
      "type": "object"
    },
    "NodeAgreement": {
      "properties": {
        "agrService": {
          "$ref": "#/definitions/NAgrService"
        },
        "lastUpdated": {
          "type": "string"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/NAService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        },
        "state": {
          "type": "string"
        }
      },
      "required": [
        "agrService",
        "lastUpdated",
        "services",
        "state"
      ],
      "type": "object"
    },
    "NodeDetails": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "connectivity": {
          "$ref": "#/definitions/MapStringObject"
        },
        "constraints": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "errors": {
          "items": {
            "type": "object"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "heartbeatIntervals": {
          "$ref": "#/definitions/NodeHeartbeatIntervals"
        },
        "id": {
          "type": "string"
        },
        "lastHeartbeat": {
          "type": "string"
        },
        "lastUpdatedNode": {
          "type": "string"
        },
        "lastUpdatedNodeError": {
          "type": "string"
        },
        "lastUpdatedNodePolicy": {
          "type": "string"
        },
        "lastUpdatedNodeStatus": {
          "type": "string"
        },
        "msgEndPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "orgid": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/OneProperty"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "publicKey": {
          "type": "string"
        },
        "registeredServices": {
          "items": {
            "$ref": "#/definitions/RegService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "runningServices": {
          "type": "string"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/OneService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "softwareVersions": {
          "$ref": "#/definitions/MapStringString"
        },
        "token": {
          "type": "string"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "connectivity",
        "constraints",
        "id",
        "lastUpdatedNode",
        "nodeType",
        "orgid",
        "owner",
        "token"
      ],
      "type": "object"
    },
    "NodeError": {
      "properties": {
        "errors": {
          "items": {
            "type": "object"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        },
        "lastUpdated": {
          "type": "string"
        }
      },
      "required": [
        "errors",
        "lastUpdated"
      ],
      "type": "object"
    },
    "NodeErrorsResp": {
      "properties": {
        "error": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "nodeId": {
          "type": "string"
        }
      },
      "required": [
        "error",
        "lastUpdated",
        "nodeId"
      ],
      "type": "object"
    },
    "NodeHealthAgreementElement": {
      "properties": {
        "lastUpdated": {
          "type": "string"
        }
      },
      "required": [
        "lastUpdated"
      ],
      "type": "object"
    },
    "NodeHealthHashElement": {
      "properties": {
        "agreements": {
          "additionalProperties": {
            "$ref": "#/definitions/NodeHealthAgreementElement"
          },
          "properties": {},
          "type": "object"
        },
        "lastHeartbeat": {
          "type": "string"
        }
      },
      "required": [
        "agreements"
      ],
      "type": "object"
    },
    "NodeHeartbeatIntervals": {
      "properties": {
        "intervalAdjustment": {
          "format": "int32",
          "type": "integer"
        },
        "maxInterval": {
          "format": "int32",
          "type": "integer"
        },
        "minInterval": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "intervalAdjustment",
        "maxInterval",
        "minInterval"
      ],
      "type": "object"
    },
    "NodePolicy": {
      "properties": {
        "constraints": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "lastUpdated": {
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/OneProperty"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        }
      },
      "required": [
        "constraints",
        "lastUpdated",
        "properties"
      ],
      "type": "object"
    },
    "NodeStatus": {
      "properties": {
        "connectivity": {
          "additionalProperties": {
            "type": "object"
          },
          "properties": {},
          "type": "object"
        },
        "lastUpdated": {
          "type": "string"
        },
        "runningServices": {
          "type": "string"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/OneService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "connectivity",
        "lastUpdated",
        "runningServices",
        "services"
      ],
      "type": "object"
    },
    "OneProperty": {
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "OneService": {
      "properties": {
        "agreementId": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "containerStatus": {
          "items": {
            "$ref": "#/definitions/ContainerStatus"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "operatorStatus": {
          "type": "object"
        },
        "orgid": {
          "type": "string"
        },
        "serviceUrl": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "agreementId",
        "arch",
        "containerStatus",
        "orgid",
        "serviceUrl",
        "version"
      ],
      "type": "object"
    },
    "OneUserInputService": {
      "properties": {
        "inputs": {
          "items": {
            "$ref": "#/definitions/OneUserInputValue"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "serviceArch": {
          "type": "string"
        },
        "serviceOrgid": {
          "type": "string"
        },
        "serviceUrl": {
          "type": "string"
        },
        "serviceVersionRange": {
          "type": "string"
        }
      },
      "required": [
        "inputs",
        "serviceOrgid",
        "serviceUrl"
      ],
      "type": "object"
    },
    "OneUserInputValue": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "Org": {
      "properties": {
        "tags": {
          "$ref": "#/definitions/MapStringString"
        },
        "description": {
          "type": "string"
        },
        "heartbeatIntervals": {
          "$ref": "#/definitions/NodeHeartbeatIntervals"
        },
        "label": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "limits": {
          "$ref": "#/definitions/OrgLimits"
        },
        "orgType": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "heartbeatIntervals",
        "label",
        "lastUpdated",
        "limits",
        "orgType",
        "tags"
      ],
      "type": "object"
    },
    "OrgLimits": {
      "properties": {
        "maxNodes": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "maxNodes"
      ],
      "type": "object"
    },
    "PServiceVersions": {
      "properties": {
        "deployment_overrides": {
          "type": "string"
        },
        "deployment_overrides_signature": {
          "type": "string"
        },
        "priority": {
          "$ref": "#/definitions/MapStringObject"
        },
        "upgradePolicy": {
          "$ref": "#/definitions/MapStringString"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "priority",
        "upgradePolicy",
        "version"
      ],
      "type": "object"
    },
    "PServices": {
      "properties": {
        "agreementLess": {
          "type": "object"
        },
        "dataVerification": {
          "$ref": "#/definitions/MapStringObject"
        },
        "nodeHealth": {
          "$ref": "#/definitions/MapStringObject"
        },
        "serviceArch": {
          "type": "string"
        },
        "serviceOrgid": {
          "type": "string"
        },
        "serviceUrl": {
          "type": "string"
        },
        "serviceVersions": {
          "items": {
            "$ref": "#/definitions/PServiceVersions"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "serviceArch",
        "serviceOrgid",
        "serviceUrl",
        "serviceVersions"
      ],
      "type": "object"
    },
    "PatchAgbotsRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "msgEndPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "jsonFormats"
      ],
      "type": "object"
    },
    "PatchNodesRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "heartbeatIntervals": {
          "$ref": "#/definitions/NodeHeartbeatIntervals"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "msgEndPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "registeredServices": {
          "items": {
            "$ref": "#/definitions/RegService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "softwareVersions": {
          "$ref": "#/definitions/MapStringString"
        },
        "token": {
          "type": "string"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "jsonFormats",
        "softwareVersions"
      ],
      "type": "object"
    },
    "PatchPatternRequest": {
      "properties": {
        "agreementProtocols": {
          "items": {
            "$ref": "#/definitions/MapStringString"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "anyProblem": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "label": {
          "type": "string"
        },
        "public": {
          "type": "object"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/PServices"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "agreementProtocols",
        "jsonFormats"
      ],
      "type": "object"
    },
    "PatchServiceRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "clusterDeployment": {
          "type": "string"
        },
        "clusterDeploymentSignature": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "deploymentSignature": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "imageStore": {
          "$ref": "#/definitions/MapStringObject"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "label": {
          "type": "string"
        },
        "matchHardware": {
          "$ref": "#/definitions/MapStringObject"
        },
        "public": {
          "type": "object"
        },
        "requiredServices": {
          "items": {
            "$ref": "#/definitions/ServiceRef"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "sharable": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/MapStringString"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "jsonFormats",
        "matchHardware",
        "userInput"
      ],
      "type": "object"
    },
    "PatchUsersRequest": {
      "properties": {
        "admin": {
          "type": "object"
        },
        "email": {
          "type": "string"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "jsonFormats"
      ],
      "type": "object"
    },
    "Pattern": {
      "properties": {
        "agreementProtocols": {
          "items": {
            "$ref": "#/definitions/MapStringString"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/PServices"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "agreementProtocols",
        "owner",
        "public"
      ],
      "type": "object"
    },
    "PatternNodeResponse": {
      "properties": {
        "id": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "nodeType",
        "publicKey"
      ],
      "type": "object"
    },
    "PolicySearchResponseDesync": {
      "properties": {
        "agbot": {
          "type": "string"
        },
        "offset": {
          "type": "string"
        },
        "session": {
          "type": "string"
        }
      },
      "required": [
        "agbot"
      ],
      "type": "object"
    },
    "PostAgbotBusinessPolRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "businessPol": {
          "type": "string"
        },
        "businessPolOrgid": {
          "type": "string"
        },
        "nodeOrgid": {
          "type": "string"
        }
      },
      "required": [
        "businessPol",
        "businessPolOrgid"
      ],
      "type": "object"
    },
    "PostAgbotPatternRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "nodeOrgid": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "patternOrgid": {
          "type": "string"
        }
      },
      "required": [
        "pattern",
        "patternOrgid"
      ],
      "type": "object"
    },
    "PostBusinessPolicySearchRequest": {
      "properties": {
        "changedSince": {
          "format": "int64",
          "type": "integer"
        },
        "nodeOrgids": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        },
        "numEntries": {
          "type": "object"
        },
        "session": {
          "type": "string"
        },
        "startIndex": {
          "type": "string"
        }
      },
      "required": [
        "changedSince",
        "nodeOrgids"
      ],
      "type": "object"
    },
    "PostBusinessPolicySearchResponse": {
      "properties": {
        "nodes": {
          "items": {
            "$ref": "#/definitions/BusinessPolicyNodeResponse"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        },
        "offsetUpdated": {
          "type": "boolean"
        }
      },
      "required": [
        "nodes",
        "offsetUpdated"
      ],
      "type": "object"
    },
    "PostNodeConfigStateRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "configState": {
          "type": "string"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "org": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "configState",
        "jsonFormats",
        "org",
        "url"
      ],
      "type": "object"
    },
    "PostNodeErrorResponse": {
      "properties": {
        "nodes": {
          "items": {
            "type": "string"
          },
          "properties": {},
          "type": "array"
        }
      },
      "required": [
        "nodes"
      ],
      "type": "object"
    },
    "PostNodeHealthRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "lastTime": {
          "type": "string"
        },
        "nodeOrgids": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        }
      },
      "required": [
        "lastTime",
        "nodeOrgids"
      ],
      "type": "object"
    },
    "PostNodeHealthResponse": {
      "properties": {
        "nodes": {
          "additionalProperties": {
            "$ref": "#/definitions/NodeHealthHashElement"
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "nodes"
      ],
      "type": "object"
    },
    "PostPatternSearchRequest": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "nodeOrgids": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        },
        "numEntries": {
          "type": "string"
        },
        "secondsStale": {
          "type": "object"
        },
        "serviceUrl": {
          "type": "string"
        },
        "startIndex": {
          "type": "string"
        }
      },
      "required": [
        "nodeOrgids",
        "serviceUrl"
      ],
      "type": "object"
    },
    "PostPatternSearchResponse": {
      "properties": {
        "lastIndex": {
          "format": "int32",
          "type": "integer"
        },
        "nodes": {
          "items": {
            "$ref": "#/definitions/PatternNodeResponse"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        }
      },
      "required": [
        "lastIndex",
        "nodes"
      ],
      "type": "object"
    },
    "PostPutBusinessPolicyRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "constraints": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "label": {
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/OneProperty"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "service": {
          "$ref": "#/definitions/BService"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "jsonFormats",
        "label",
        "service"
      ],
      "type": "object"
    },
    "PostPutOrgRequest": {
      "properties": {
        "tags": {
          "$ref": "#/definitions/MapStringString"
        },
        "description": {
          "type": "string"
        },
        "heartbeatIntervals": {
          "$ref": "#/definitions/NodeHeartbeatIntervals"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "label": {
          "type": "string"
        },
        "limits": {
          "$ref": "#/definitions/OrgLimits"
        },
        "orgType": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "jsonFormats",
        "label",
        "tags"
      ],
      "type": "object"
    },
    "PostPutPatternRequest": {
      "properties": {
        "agreementProtocols": {
          "items": {
            "$ref": "#/definitions/MapStringString"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "anyProblem": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "label": {
          "type": "string"
        },
        "public": {
          "type": "object"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/PServices"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "agreementProtocols",
        "jsonFormats",
        "label",
        "services"
      ],
      "type": "object"
    },
    "PostPutServiceDockAuthRequest": {
      "properties": {
        "registry": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "registry",
        "token"
      ],
      "type": "object"
    },
    "PostPutServiceRequest": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "clusterDeployment": {
          "type": "string"
        },
        "clusterDeploymentSignature": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "deploymentSignature": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "imageStore": {
          "$ref": "#/definitions/MapStringObject"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "label": {
          "type": "string"
        },
        "matchHardware": {
          "$ref": "#/definitions/MapStringObject"
        },
        "public": {
          "type": "boolean"
        },
        "requiredServices": {
          "items": {
            "$ref": "#/definitions/ServiceRef"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "sharable": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/MapStringString"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "arch",
        "jsonFormats",
        "label",
        "matchHardware",
        "public",
        "sharable",
        "url",
        "userInput",
        "version"
      ],
      "type": "object"
    },
    "PostPutUsersRequest": {
      "properties": {
        "admin": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "hubAdmin": {
          "type": "object"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "admin",
        "email",
        "password"
      ],
      "type": "object"
    },
    "PostServiceSearchRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "orgid": {
          "type": "string"
        },
        "serviceArch": {
          "type": "string"
        },
        "serviceURL": {
          "type": "string"
        },
        "serviceVersion": {
          "type": "string"
        }
      },
      "required": [
        "orgid",
        "serviceArch",
        "serviceURL",
        "serviceVersion"
      ],
      "type": "object"
    },
    "PostServiceSearchResponse": {
      "properties": {
        "nodes": {
          "items": {
            "$ref": "#/definitions/Tuple2StringOptionString"
          },
          "properties": {},
          "type": "array"
        }
      },
      "required": [
        "nodes"
      ],
      "type": "object"
    },
    "Prop": {
      "properties": {
        "name": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "propType": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "op",
        "propType",
        "value"
      ],
      "type": "object"
    },
    "PutAgbotsRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "msgEndPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "jsonFormats",
        "name",
        "publicKey",
        "token"
      ],
      "type": "object"
    },
    "PutNodeErrorRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "errors": {
          "items": {
            "type": "object"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        }
      },
      "required": [
        "errors",
        "jsonFormats"
      ],
      "type": "object"
    },
    "PutNodePolicyRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "constraints": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/OneProperty"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        }
      },
      "required": [
        "constraints",
        "jsonFormats"
      ],
      "type": "object"
    },
    "PutNodeStatusRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "connectivity": {
          "$ref": "#/definitions/MapStringObject"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "runningServices": {
          "type": "string"
        },
        "services": {
          "items": {
            "$ref": "#/definitions/OneService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "connectivity",
        "jsonFormats",
        "runningServices",
        "services"
      ],
      "type": "object"
    },
    "PutNodesRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "arch": {
          "type": "string"
        },
        "dbUpdate$default$5": {
          "type": "string"
        },
        "dbUpsert$default$5": {
          "type": "string"
        },
        "heartbeatIntervals": {
          "$ref": "#/definitions/NodeHeartbeatIntervals"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "msgEndPoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "registeredServices": {
          "items": {
            "$ref": "#/definitions/RegService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "softwareVersions": {
          "$ref": "#/definitions/MapStringString"
        },
        "token": {
          "type": "string"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/OneUserInputService"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        }
      },
      "required": [
        "jsonFormats",
        "name",
        "pattern",
        "publicKey",
        "softwareVersions",
        "token"
      ],
      "type": "object"
    },
    "PutPatternKeyRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "PutServiceKeyRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "PutServicePolicyRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "constraints": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "jsonFormats": {
          "$ref": "#/definitions/Formats"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/OneProperty"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        }
      },
      "required": [
        "constraints",
        "jsonFormats"
      ],
      "type": "object"
    },
    "RegService": {
      "properties": {
        "configState": {
          "type": "string"
        },
        "numAgreements": {
          "format": "int32",
          "type": "integer"
        },
        "policy": {
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/Prop"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "numAgreements",
        "policy",
        "properties",
        "url"
      ],
      "type": "object"
    },
    "ResourceChangesInnerObject": {
      "properties": {
        "changeId": {
          "format": "int64",
          "type": "integer"
        },
        "lastUpdated": {
          "type": "string"
        }
      },
      "required": [
        "changeId",
        "lastUpdated"
      ],
      "type": "object"
    },
    "ResourceChangesRequest": {
      "properties": {
        "anyProblem": {
          "type": "string"
        },
        "changeId": {
          "format": "int64",
          "type": "integer"
        },
        "lastUpdated": {
          "type": "string"
        },
        "maxRecords": {
          "format": "int32",
          "type": "integer"
        },
        "orgList": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        }
      },
      "required": [
        "changeId",
        "maxRecords",
        "orgList"
      ],
      "type": "object"
    },
    "ResourceChangesRespObject": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/ChangeEntry"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "exchangeVersion": {
          "type": "string"
        },
        "hitMaxRecords": {
          "type": "boolean"
        },
        "mostRecentChangeId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "changes",
        "exchangeVersion",
        "hitMaxRecords",
        "mostRecentChangeId"
      ],
      "type": "object"
    },
    "Service": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "clusterDeployment": {
          "type": "string"
        },
        "clusterDeploymentSignature": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "deploymentSignature": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "imageStore": {
          "additionalProperties": {
            "type": "object"
          },
          "properties": {},
          "type": "object"
        },
        "label": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        },
        "matchHardware": {
          "additionalProperties": {
            "type": "object"
          },
          "properties": {},
          "type": "object"
        },
        "owner": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "requiredServices": {
          "items": {
            "$ref": "#/definitions/ServiceRef"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "sharable": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "userInput": {
          "items": {
            "$ref": "#/definitions/MapStringString"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "matchHardware",
        "owner",
        "public",
        "userInput"
      ],
      "type": "object"
    },
    "ServiceDockAuth": {
      "properties": {
        "dockAuthId": {
          "format": "int32",
          "type": "integer"
        },
        "lastUpdated": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "dockAuthId",
        "lastUpdated",
        "registry",
        "token",
        "username"
      ],
      "type": "object"
    },
    "ServicePolicy": {
      "properties": {
        "constraints": {
          "items": {
            "type": "string"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "type": "array"
        },
        "lastUpdated": {
          "type": "string"
        },
        "properties": {
          "items": {
            "$ref": "#/definitions/OneProperty"
          },
          "properties": {
            "empty": {
              "type": "boolean"
            },
            "traversableAgain": {
              "type": "boolean"
            }
          },
          "required": [
            "empty"
          ],
          "type": "array"
        }
      },
      "required": [
        "constraints",
        "lastUpdated",
        "properties"
      ],
      "type": "object"
    },
    "ServiceRef": {
      "properties": {
        "arch": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "versionRange": {
          "type": "string"
        }
      },
      "required": [
        "arch",
        "org",
        "url"
      ],
      "type": "object"
    },
    "Tuple2StringOptionString": {
      "properties": {
        "_1": {
          "type": "string"
        },
        "_2": {
          "type": "string"
        }
      },
      "required": [
        "_1",
        "_2"
      ],
      "type": "object"
    },
    "User": {
      "properties": {
        "admin": {
          "type": "boolean"
        },
        "email": {
          "type": "string"
        },
        "hubAdmin": {
          "type": "boolean"
        },
        "lastUpdated": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        }
      },
      "required": [
        "admin",
        "email",
        "hubAdmin",
        "lastUpdated",
        "password",
        "updatedBy"
      ],
      "type": "object"
    }
  },
  "security": [],
  "externalDocs": {
    "description": "Open-horizon ExchangeAPI",
    "url": "https://github.com/open-horizon/exchange-api"
  },
  "x-components": {}
}
